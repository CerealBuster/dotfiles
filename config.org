#+TITLE: Emacs configuration
#+AUTHOR: Raffael Affolter

* EXWM

#+BEGIN_SRC emacs-lisp
    (use-package exwm
      :ensure t
      :config
      (require 'exwm-config)
   ;   (exwm-config-default)
  (setq exwm-workspace-number 4)
      (require 'exwm-systemtray)
      (exwm-systemtray-enable)
      (setq exwm-systemtray-height 16)
(setq exwm-input-global-keys
      `(
        ;; Bind "s-r" to exit char-mode and fullscreen mode.
        ([?\s-r] . exwm-reset)
        ;; Bind "s-w" to switch workspace interactively.
        ([?\s-w] . exwm-workspace-switch)
        ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))
        ;; Bind "s-&" to launch applications ('M-&' also works if the output
        ;; buffer does not bother you).
        ([?\s-&] . (lambda (command)
		     (interactive (list (read-shell-command "$ ")))
		     (start-process-shell-command command nil command)))
        ;; Bind "s-<f2>" to "slock", a simple X display locker.
        ([s-f2] . (lambda ()
		    (interactive)
		    (start-process "" nil "/usr/bin/slock")))))
)
#+END_SRC

* desktop-environment

#+BEGIN_SRC emacs-lisp
  (use-package desktop-environment
    :ensure t
    :config (desktop-environment-mode))
#+END_SRC

* auto-package-update

we want to auto update our packages

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC

* Default settings

** UTF-8 Please

#+BEGIN_SRC emacs-lisp

(set-charset-priority 'unicode)
(setq locale-coding-system   'utf-8)   ; pretty
(set-terminal-coding-system  'utf-8)   ; pretty
(set-keyboard-coding-system  'utf-8)   ; pretty
(set-selection-coding-system 'utf-8)   ; please
(prefer-coding-system        'utf-8)   ; with sugar on top
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))


#+END_SRC

** Garbace collection allow more than 20MB

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)

#+END_SRC

** No backup files
#+BEGIN_SRC emacs-lisp

(setq make-backup-files nil)

#+END_SRC

** Auto-Save in /tmp

#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Always follow symlinks

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** Sentences have one space after a period

#+BEGIN_SRC emacs-lisp

(setq sentence-end-double-space nil)

#+END_SRC

** Confirm before closing Emacs

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)

#+END_SRC

** Ask y/n instead of yes/no

#+BEGIN_SRC emacs-lisp

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** Autorevert files on change

#+BEGIN_SRC emacs-lisp

(global-auto-revert-mode t)

#+END_SRC


** Shortcut for changing font size
#+BEGIN_SRC emacs-lisp

(define-key global-map (kbd "C-1") 'text-scale-increase)
(define-key global-map (kbd "C-0") 'text-scale-decrease)

#+END_SRC

** Disable startup message
#+BEGIN_SRC emacs-lisp

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

#+END_SRC
** no guit tooolbar

#+BEGIN_SRC emacs-lisp

(tool-bar-mode 0)

#+END_SRC

** Automatic line Breaks

#+BEGIN_SRC emacs-lisp

(add-hook 'text-mode-hook 'auto-fill-mode)

#+END_SRC

** Enable Narrow to region

#+BEGIN_SRC emacs-lisp

(put 'narrow-to-region 'disabled nil)

#+END_SRC

** We dont need scrollbars

#+BEGIN_SRC emacs-lisp

(scroll-bar-mode -1)

#+END_SRC

** Remeber cursor position when reopening files

#+BEGIN_SRC emacs-lisp

(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)

#+END_SRC

** no bell

#+BEGIN_SRC emacs-lisp

(setq visible-bell t)

#+END_SRC

** auto completion

#+BEGIN_SRC emacs-lisp

(use-package auto-complete
  :ensure t
  :config (ac-config-default)
)
#+END_SRC


** default font
#+BEGIN_SRC emacs-lisp
(when (member "hack" (font-family-list))
  (set-face-attribute 'default nil :font "hack"))
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration nil)
  :config
  (global-set-key (kbd "M-x")'execute-extended-command)
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))


(use-package evil-leader
  :ensure t
  :init (global-evil-leader-mode)
  :config
  (progn
    (evil-leader/set-leader ",")
    (evil-leader/set-key
       "w" 'basic-save-buffer
       "s" 'flyspell-buffer
       "b" 'evil-buffer
       "q" 'evil-quit)))

(use-package evil-magit
  :ensure t)

(use-package evil-mu4e
  :ensure t)

#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp

(use-package projectile
  :ensure t
  :defer t
  :config
  (projectile-global-mode))

#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init
  (require 'helm-config)
  :config
  (helm-mode 1)
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (define-key helm-map (kbd "S-SPC") 'helm-toggle-visible-mark)
  (define-key helm-find-files-map (kbd "C-k") 'helm-find-files-up-one-level))

#+END_SRC

** Helm projectile
#+BEGIN_SRC emacs-lisp

(use-package helm-projectile
  :bind (("C-S-P" . helm-projectile-switch-project)
         :map evil-normal-state-map
         ("C-p" . helm-projectile))
  :ensure t
  :config
  (evil-leader/set-key
    "ps" 'helm-projectile-ag
    "pa" 'helm-projectile-find-file-in-known-projects
  ))

#+END_SRC



* Whichkey
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode) )
#+END_SRC

* Themening

** Theme to load

#+BEGIN_SRC emacs-lisp
(use-package color-theme :ensure t)

(load-theme 'tango-dark t)
#+END_SRC

*** ample

#+BEGIN_SRC emacs-lisp

;;(use-package ample-theme
;;  :init (progn (load-theme 'ample t t)
;;               (load-theme 'ample-flat t t)
;;               (load-theme 'ample-light t t)
;;               (enable-theme 'ample-flat))
;;  :defer t
;;  :ensure t)

#+END_SRC


** Powerline
#+BEGIN_SRC emacs-lisp

(use-package powerline
  :ensure t
  :config (powerline-default-theme ))

#+END_SRC

** Airline Themes

#+BEGIN_SRC emacs-lisp

(use-package airline-themes :ensure t
  :init (setq airline-helm-colors t )
  :config (load-theme 'airline-papercolor t))

#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp

(use-package dashboard
  :ensure t
  :config (dashboard-setup-startup-hook))

#+END_SRC

* Plantuml

#+BEGIN_SRC emacs-lisp

(use-package plantuml-mode
  :ensure t
  :config (progn
            (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
            (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))))

#+END_SRC

* mu43
#+BEGIN_SRC emacs-lisp
(setq auth-sources '("~/.authinfo.gpg"))

(use-package mu4e
  :commands mu4e
  :config
    (setq mu4e-maildir "~/Maildir")
    (setq mu4e-get-mail-command "offlineimap")
    (setq mu4e-update-interval 300)
    (setq mu4e-attachement-dir "~/Downloads")
    (setq user-full-name "Raffael Affolter")
    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-view-show-adresses t)
    (setq message-send-mail-function 'smtpmail-send-it)
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-contexts
       (list (make-mu4e-context
               :name "ZHAW"
               :enter-func (lambda() (mu4e-message "Switch to ZHAW"))
               :match-func (lambda(msg)
                             (when msg
                                (s-prefix? "/ZHAW/" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "affolraf@students.zhaw.ch")
                      (mu4e-sent-folder . "/ZHAW/Gesendete Elemente")
                      (mu4e-drafts-folder . "/ZHAW/Drafts")
                      (mu4e-trash-folder . "/ZHAW/Trash")
                      (smtpmail-default-smtp-server . "smtps.zhaw.ch")
                      (smtpmail-smtp-server . "smtps.zhaw.ch")
                      (smtpmail-local-domain . "zhaw.ch")
                      (smtpmail-smtp-user . "affolraf@students.zhaw.ch")
                      (smtpmail-stream-type . starttls)
                      (smtpmail-smtp-service . 587)))
              (make-mu4e-context
               :name "Outlook"
               :enter-func (lambda() (mu4e-message "Switch to Outlook"))
               :match-func (lambda(msg)
                             (when msg
                                (s-prefix? "/Outlook/" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "raffael.affolter@outlook.com")
                      (mu4e-sent-folder . "/Outlook/Sent")
                      (mu4e-drafts-folder . "/Outlook/Drafts")
                      (mu4e-trash-folder . "/Outlook/Trash")
                      (smtpmail-default-smtp-server . "smtp.office365.com")
                      (smtpmail-smtp-server . "smtp.office365.com")
                      (smtpmail-local-domain . "outlook.com")
                      (smtpmail-smtp-user . "raffael.affolter@hotmail.com")
                      (smtpmail-stream-type . starttls)
                      (smtpmail-smtp-service . 587)
                      (mu4e-sent-messages-behavior . delete)
                      (mu4e-sent-messages-behavior . delete)))
(make-mu4e-context
               :name "UZH"
               :enter-func (lambda() (mu4e-message "Switch to UZH"))
               :match-func (lambda(msg)
                             (when msg
                                (s-prefix? "/UZH/" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "raffael.affolter@uzh.ch")
                      (mu4e-sent-folder . "/UZH/Gesendet")
                      (mu4e-drafts-folder . "/UZH/Drafts")
                      (mu4e-trash-folder . "/UZH/Trash")
                      (smtpmail-default-smtp-server . "smtp.uzh.ch")
                      (smtpmail-smtp-server . "smtp.uzh.ch")
                      (smtpmail-local-domain . "uzh.ch")
                      (smtpmail-smtp-user . "raffael.affolter@uzh.ch")
                      (smtpmail-stream-type . starttls)
                      (smtpmail-smtp-service . 587)))

))

    (add-hook 'message-mode-hook 'turn-on-orgtbl)
    (add-hook 'message-mode-hook 'turn-on-orgstruct++)
    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
    (add-hook 'mu4e-compose-mode-hook (lambda() (ispell-change-dictionary "deutsch"))))
#+END_SRC
* Org-Mode Settings
** Enable native intendations in sourc blocks

#+BEGIN_SRC emacs-lisp

(setq org-src-tab-acts-natively t)

#+END_SRC

** KOMA-SCRIPT
we want koma script

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
                 '("koma-article" "\\documentclass{scrartcl}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (with-eval-after-load "ox-latex"

  (add-to-list 'org-latex-classes  '("koma-letter"
       "\\documentclass[11pt]{scrlttr2}\n
        \\usepackage[utf8]{inputenc}\n
        \\usepackage[T1]{fontenc}\n
        \\usepackage{xcolor}"

       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+END_SRC

** eurpecv-class

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("europecv" "\\documentclass[utf8,a4Paper, 10pt, helvetica,narrow,flagWB, booktabs,totpages,german]{europevc}")))

#+END_SRC

** Plain lists

#+BEGIN_SRC emacs-lisp

  (setq org-list-allow-alphabetical t)

#+END_SRC

** where is my agenda

#+BEGIN_SRC emacs-lisp

(setq org-agenda-files '("~/Dokumente/"))

#+END_SRC

** Org bullets makes things look pretty

  #+BEGIN_SRC emacs-lisp

    (setenv "BROWSER" "chromium-browser")

        (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
** Org mu4e

#+BEGIN_SRC emacs-lisp
(use-package org-mu4e)
#+END_SRC

** enable Markdown export

#+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org
      (require 'ox-md nil t))
#+END_SRC

* Latex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t)

#+END_SRC

* Programming settings
** Defaults

Line numbers

#+BEGIN_SRC emacs-lisp

(global-linum-mode t)

#+END_SRC

Tabs
#+BEGIN_SRC emacs-lisp

(setq-default tab-width 2)

#+END_SRC

Use 2 spaces instead of tab.

#+BEGIN_SRC emacs-lisp

(setq-default tab-width 2 indent-tabs-mode nil)

#+END_SRC

intendation cannot insert tabs

#+BEGIN_SRC emacs-lisp

(setq-default inent-tabs-mode nil)

#+END_SRC
Two spaces for programming languages

#+BEGIN_SRC emacs-lisp
(setq python-indent 2)
(setq js-indent-level 2)
#+END_SRC

auto indent with return key
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)

#+END_SRC

No trailing white spaces except in makrdowns

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook '(lambda()
                              (when (not (derived-mode-p 'markdown-mode))
                                (delete-trailing-whitespace))))
#+END_SRC

highlight fixme todo and bug statement

#+BEGIN_SRC emacs-lisp

(use-package fixme-mode
  :ensure t
  :config (fixme-mode t))

#+END_SRC

** Paredit

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :init
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'clojure-mode-hook 'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'ielm-mode-hook 'enable-paredit-mode)
  (add-hook 'json-mode-hook 'enable-paredit-mode)
  (add-hook 'scheme-mode-hook 'enable-paredit-mode)
  (add-hook 'geiser-repl-mode-hook 'enable-paredit-mode)
  (add-hook 'slime-repl-mode-hook 'enable-paredit-mode))
#+END_SRC

** Parinfer

#+BEGIN_SRC emacs-lisp

;;(use-package parinfer
;;  :ensure t
;;  :bind
;;  (("C-," . parinfer-toggle-mode))
;;  :init
;;  (progn
;;    (setq parinfer-extensions
;;          '(defaults       ; should be included.
;;            pretty-parens  ; different paren styles for different modes.
;;            evil           ; If you use Evil.
;;            ;lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
;;            paredit        ; Introduce some paredit commands.
;;            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
;;            smart-yank))   ; Yank behavior depend on mode.
;;    (add-hook 'clojure-mode-hook #'parinfer-mode)
;;    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
;;    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
;;    (add-hook 'scheme-mode-hook #'parinfer-mode)
;;    (add-hook 'lisp-mode-hook #'parinfer-mode)))

#+END_SRC

** LISP settings

#+BEGIN_SRC emacs-lisp


#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp

(use-package clojure-mode
  :ensure t
)
(use-package clojure-mode-extra-font-locking
  :ensure t)

#+END_SRC

** Cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t)

(setq cider-cljs-lein-repl
	"(do (require 'figwheel-sidecar.repl-api)
         (figwheel-sidecar.repl-api/start-figwheel!)
         (figwheel-sidecar.repl-api/cljs-repl))")
#+END_SRC



** SLIME

#+BEGIN_SRC emacs-lisp

(use-package slime
  :ensure t
  :config (progn (setq inferior-lisp-program "/usr/bin/clisp -K full")
          (setq slime-contribs '(slime-fancy))))
#+END_SRC


** Geiser

We want a good racket workspace

#+BEGIN_SRC emacs-lisp
(use-package geiser
  :ensure t)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp

(use-package magit
  :ensure t
  :config (global-set-key (kbd "C-x g") 'magit-status))

#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

#+END_SRC


** Rainboooows

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :init (progn
         (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
         (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode))
)
(rainbow-delimiters-mode)
#+END_SRC
** Yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
* Golden Ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :init (setq golden-ratio-auto-scale t)
    :config (golden-ratio-mode 1))
#+END_SRC
